[{"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\index.js":"1","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\App.js":"2","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Welcome.js":"3","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Login.js":"4","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Home.js":"5","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Register.js":"6","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\FileDetails.js":"7","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Header.js":"8","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\TeacherInfo.js":"9","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\GradeDistribution.js":"10","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Dates.js":"11","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\ImageGrid.js":"12","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Dropzone.js":"13","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\CalendarPg.js":"14","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\NavBar.js":"15","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Description.js":"16","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\PopupField.js":"17"},{"size":210,"mtime":1681693109394,"results":"18","hashOfConfig":"19"},{"size":949,"mtime":1681693109393,"results":"20","hashOfConfig":"19"},{"size":1330,"mtime":1681081640486,"results":"21","hashOfConfig":"19"},{"size":6238,"mtime":1681784952382,"results":"22","hashOfConfig":"19"},{"size":9489,"mtime":1681933906011,"results":"23","hashOfConfig":"19"},{"size":10199,"mtime":1681787138733,"results":"24","hashOfConfig":"19"},{"size":14294,"mtime":1681939330975,"results":"25","hashOfConfig":"19"},{"size":1003,"mtime":1681739858497,"results":"26","hashOfConfig":"19"},{"size":2350,"mtime":1681933906047,"results":"27","hashOfConfig":"19"},{"size":1053,"mtime":1681933906033,"results":"28","hashOfConfig":"19"},{"size":1715,"mtime":1681933906019,"results":"29","hashOfConfig":"19"},{"size":1240,"mtime":1681933906036,"results":"30","hashOfConfig":"19"},{"size":3288,"mtime":1681693281095,"results":"31","hashOfConfig":"19"},{"size":17080,"mtime":1681933905997,"results":"32","hashOfConfig":"19"},{"size":622,"mtime":1681933906014,"results":"33","hashOfConfig":"19"},{"size":714,"mtime":1681933906028,"results":"34","hashOfConfig":"19"},{"size":200,"mtime":1681933906038,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"cy1oq5",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"39"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"39"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"39"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"39"},"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\index.js",[],[],[],"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\App.js",[],[],"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Welcome.js",["98"],[],"import './Welcome.css';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport logo from './../syllabyelogo.png';\r\n//import { Box } from '@mui/material';\r\n\r\nfunction Welcome() {\r\n    const navigate = useNavigate()\r\n    function handleLoginAsk(e){\r\n        e.preventDefault();\r\n        navigate('/login');\r\n    }\r\n\r\n    function handleRegisterAsk(e){\r\n        e.preventDefault();\r\n        navigate('/register');\r\n    }\r\n    \r\n  return (\r\n    <div className=\"App3\">\r\n        <header className=\"App-header3\">\r\n            <div className = \"nameEnc3\">\r\n                <label for=\"nameField3\" id=\"name3\"><img src={logo}/></label>\r\n            </div>\r\n        </header>\r\n        <div className = \"Form3\">\r\n            <div className = \"RealForm3\">\r\n                <label for=\"signinField\" id=\"signin2\">Welcome to Syllabye</label>\r\n                <p for=\"welcoming\" id = \"welcomeMessage\">The web app that will organize your classes for you. Sign up to get started.</p>\r\n                <div className = \"Buttons\">\r\n                    <input id=\"signinButton2\" type=\"submit\" value=\"Sign In\" onClick={handleLoginAsk}/>\r\n                    <input id=\"signupButton3\" type=\"submit\" value=\"Sign Up\" onClick={handleRegisterAsk}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Welcome;","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Login.js",["99","100"],[],"import './Login.css';\r\nimport {useState} from 'react'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport logo from './../syllabyelogo.png';\r\nimport { gapi } from 'gapi-script';\r\nimport { GoogleOAuthProvider } from '@react-oauth/google';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\n\r\nfunction Login() {\r\n    var CLIENT_ID\r\n    var API_KEY\r\n    var DISCOVERY_DOCS\r\n    var SCOPES\r\n\r\n    const res = fetch(\"http://localhost:1337/api/google-auth-keys\", {\r\n        method: \"GET\",\r\n    }).then((res) => res.json()\r\n    ).then((res) => {\r\n        CLIENT_ID = res.CLIENT_ID\r\n        API_KEY = res.API_KEY\r\n        DISCOVERY_DOCS = res.DISCOVERY_DOCS\r\n        SCOPES = res.SCOPES\r\n    });\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    function handleRegisterAsk(e){\r\n        e.preventDefault();\r\n        navigate('/register');\r\n    }\r\n\r\n    async function loginUser(event) {\r\n        event.preventDefault()\r\n\r\n        const response = await fetch('http://localhost:1337/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password\r\n            }),\r\n        })\r\n        \r\n        const data = await response.json();\r\n        \r\n        if(data.user){\r\n            localStorage.setItem('token', data.user)\r\n            navigate('/home')\r\n        }\r\n        else{\r\n            //add error message\r\n        }\r\n    }\r\n\r\n    async function googleAuth() {\r\n        gapi.load('client:auth2', () => {\r\n            gapi.client.init({\r\n                apiKey: API_KEY,\r\n                clientId: CLIENT_ID,\r\n                discoveryDocs: [DISCOVERY_DOCS],\r\n                scope: SCOPES,\r\n            }).then(() => {\r\n                gapi.auth2.getAuthInstance().signIn().then(async () => {\r\n                    const google = await gapi.auth2.getAuthInstance().currentUser\r\n                    const googleUser = await google.get().getBasicProfile();\r\n                    const userName = googleUser.getName();\r\n                    const userEmail = googleUser.getEmail();\r\n\r\n                    console.log(userName);\r\n                    console.log(userEmail);\r\n\r\n                    const response = await fetch('http://localhost:1337/api/google-auth-login', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: userName,\r\n                            email: userEmail,\r\n                        }),\r\n                    })\r\n\r\n                    const data = await response.json();\r\n                    console.log(data);\r\n\r\n                    for (let i = 0; i < localStorage.length; i++) {\r\n                        const key = localStorage.key(i);\r\n                        if (key.startsWith('token')) {\r\n                          console.log(localStorage.getItem(key));\r\n                        }\r\n                    }\r\n\r\n                    if(data.status === 'ok'){\r\n                        console.log(\"Works\")\r\n                        localStorage.setItem('token', data.user)\r\n                        navigate('/home')\r\n                    }\r\n                    else if(data.status === 'error'){\r\n                        alert(\"You already have an account with this email. Please login instead.\")\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App2\">\r\n            <header className=\"App-header2\">\r\n                <div className = \"nameEnc2\">\r\n                    <label for=\"nameField2\" id=\"name2\"><img src={logo}/></label>\r\n                </div>\r\n            </header>\r\n            <div className = \"Form2\">\r\n                <div className = \"RealForm2\">\r\n                    <form onSubmit = {loginUser}>\r\n                        <label for=\"signinField\" id=\"signin\">Sign In</label>\r\n                        <label for=\"personNameField\" class = \"labels2\" id = \"personName\">Username</label>\r\n                        <input \r\n                            class=\"inputs2\"\r\n                            value = {email}\r\n                            onChange = {(e) => setEmail(e.target.value)}\r\n                            type=\"text\"  \r\n                        />\r\n                        <br />\r\n                        <label for=\"passwordField\" class = \"labels2\" id = \"password\">Password </label>\r\n                        {/* <br /> */}\r\n                        <input \r\n                            class=\"inputs2\"\r\n                            value = {password}\r\n                            onChange = {(e) => setPassword(e.target.value)}\r\n                            type=\"password\"  \r\n                        />\r\n                        <br />\r\n                        <input className='Buttons' id=\"signinButton\" type=\"submit\" value=\"Sign In\"/>\r\n                        <p className=\"or\"> or </p>\r\n                        <div className=\"googleBtn\">\r\n                            <button className=\"googleBtn\">\r\n                        <GoogleOAuthProvider clientId=\"436198478288-efo40fbhrj324kk9uktqfr20tthrt5dk.apps.googleusercontent.com\">\r\n                        <GoogleLogin\r\n                            id = \"googleButton\"\r\n                            onSuccess={googleAuth}\r\n                            onError={() => {\r\n                                console.log('Login Failed');\r\n                            }}\r\n                        > test </GoogleLogin> \r\n                        </GoogleOAuthProvider>\r\n                        </button>\r\n                        </div>\r\n                        <p id = \"noAccount\">Don't have an account?</p>\r\n                        <input className='Buttons' id=\"signupButton2\" type=\"submit\" value=\"Click here to sign up.\" onClick={handleRegisterAsk}/>\r\n                        \r\n                        \r\n                    </form>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Home.js",["101","102","103","104","105","106","107"],[],"import React, { useState, useCallback, useEffect} from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Dropzone from \"./components/Dropzone\";\r\nimport ImageGrid from \"./components/ImageGrid\";\r\nimport './Home.css';\r\nimport './components/ImageGrid.css';\r\nimport cuid from \"cuid\";\r\nimport { pdfjs, Document, Page } from 'react-pdf';\r\nimport * as jose from 'jose'\r\nimport NavBar from \"./NavBar\";\r\nimport FileDetails from \"./FileDetails\";\r\nimport {useNavigate, BrowserRouter as Router, Routes, Route} from 'react-router-dom'\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nlet extractedText = null;\r\nlet userName = null;\r\n\r\nasync function extract(file, thumbnail){\r\n    const formData = new FormData()\r\n    formData.append(\"pdfFile\", file)\r\n    // console.log(\"test\");\r\n    const res = await fetch(\"http://localhost:1338/extract-text\", {\r\n        method: \"post\",\r\n        body: formData\r\n    });\r\n\r\n    extractedText = await res.json();\r\n    if (extractedText) {\r\n        const formData2 = new FormData()\r\n        formData2.append(\"text\", JSON.stringify(extractedText))\r\n        formData2.append(\"thumbnail\", thumbnail)\r\n        const res = await fetch(\"http://localhost:1337/api/upload\", {\r\n            method: \"post\",\r\n            headers: {\"x-access-token\" : localStorage.getItem(\"token\"),},\r\n            body: formData2\r\n        });\r\n        if(res){\r\n            return \"Success\";\r\n        }\r\n        else{\r\n            return \"Upload Error\";\r\n        }\r\n    }\r\n    else{\r\n        return \"PDF Error\";\r\n    }\r\n}\r\n\r\nfunction Home(){\r\n    const [images, setImages] = useState([]);\r\n    const [classes, setClasses] = useState([]);\r\n    const navigate = useNavigate()\r\n    // var num = 0;\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token')\r\n        if(token){\r\n            const user = jose.decodeJwt(token)\r\n            if(!user){\r\n                localStorage.removeItem('token')\r\n                navigate('/login')\r\n            }\r\n            else{\r\n                userName = user.name;\r\n\r\n                const files = fetch(\"http://localhost:1337/api/files\", {\r\n                    method: \"GET\",\r\n                    headers: {\"x-access-token\" : localStorage.getItem(\"token\"),},\r\n                }).then((res) => {\r\n                    return res.json()\r\n                }).then((res) => {\r\n                    res.forEach((file) => {\r\n                        var courseName = file.fileData.courseNum;\r\n                        var classInfo = [];\r\n                        classInfo.push({field: 'Professor Name', info: file.fileData.professorName});\r\n                        classInfo.push({field: \"Professor email\", info: file.fileData.professorEmail});\r\n                        classInfo.push({field: \"Professor phone\", info: file.fileData.professorPhone});\r\n                        classInfo.push({field: \"Office location\", info: file.fileData.officeLocation});\r\n                        classInfo.push({field: \"Office hours\", info: file.fileData.officeHours});\r\n                        classInfo.push({field: \"Class times\", info: file.fileData.meetings});\r\n                        var CourseDes = file.fileData.courseDescription;\r\n                        var gradeDistribution = file.fileData.grades;\r\n                        var dates = file.fileData.calendar;\r\n                        var gridID = cuid();\r\n                        setClasses((prevState) => [\r\n                            ...prevState,\r\n                            { id: gridID, classID: prevState.classID + 1, course: courseName, classInfo: classInfo, description: CourseDes, gradeDistribution: gradeDistribution, dates: dates}\r\n                        ]);\r\n                        setImages((prevState) => [\r\n                            ...prevState,\r\n                            { id: gridID, src: file.thumbnail, name: file.fileData.courseName },\r\n                        ]);\r\n                    })\r\n                });\r\n            }\r\n        }\r\n        else{\r\n            navigate('/login')\r\n        }\r\n    }, [])\r\n\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        acceptedFiles.map((file) => {\r\n        const reader = new FileReader();\r\n        reader.onload = function (e) {\r\n            const fileType = file.type.split('/')[0];\r\n            if (fileType === 'image') { // display warning for no PDF file\r\n            // process image files\r\n            } \r\n            else if (fileType === 'application' && file.type.split('/')[1] === 'pdf') {\r\n            // process pdf files\r\n            const pdfData = new Uint8Array(e.target.result);\r\n            pdfjs.getDocument(pdfData).promise.then((pdfDocument) => {\r\n                pdfDocument.getPage(1).then((pdfPage) => {\r\n                const viewport = pdfPage.getViewport({ scale: 0.5 });\r\n                const canvas = document.createElement('canvas');\r\n                const context = canvas.getContext('2d');\r\n                canvas.height = viewport.height;\r\n                canvas.width = viewport.width;\r\n                document.body.appendChild(canvas);\r\n                pdfPage.render({ canvasContext: context, viewport: viewport }).promise.then(async() => {\r\n                    const thumbnail = canvas.toDataURL();\r\n                    await extract(file, thumbnail)\r\n                    document.body.removeChild(canvas); // Remove canvas from DOM after rendering\r\n                    console.log(`Thumbnail generated for PDF file: ${file.name}`);\r\n                    var courseName = extractedText.courseNum;\r\n                    var classInfo = [];\r\n                    classInfo.push({field: 'Professor Name', info: extractedText.professorName});\r\n                    classInfo.push({field: \"Professor email\", info: extractedText.professorEmail});\r\n                    classInfo.push({field: \"Professor phone\", info: extractedText.professorPhone});\r\n                    classInfo.push({field: \"Office location\", info: extractedText.officeLocation});\r\n                    classInfo.push({field: \"Office hours\", info: extractedText.officeHours});\r\n                    classInfo.push({field: \"Class times\", info: extractedText.meetings})\r\n                    // var grades = [];\r\n                    // grades.push({range: '94-100', grade: 'A'});\r\n                    var CourseDes = extractedText.courseDescription;\r\n                    \r\n                    var gradeDistribution = extractedText.grades;\r\n                    // gradeDistribution.push({field: 'Homework', weight: '35%'});\r\n                    var dates = extractedText.calendar;\r\n                    // num++;\r\n                    var gridID = cuid();\r\n                    setClasses((prevState) => [\r\n                        ...prevState,\r\n                        {id: gridID, classID: prevState.classID + 1, course: courseName, classInfo: classInfo, description: CourseDes, gradeDistribution: gradeDistribution, dates: dates},\r\n                    ]);\r\n                    setImages((prevState) => [\r\n                        ...prevState,\r\n                        { id: gridID, src: thumbnail, name: extractedText.courseName },\r\n                    ]);\r\n                    // num++;\r\n                }).catch((error) => {\r\n                    console.error(`Error rendering PDF page: ${error}`);\r\n                    });\r\n                }).catch((error) => {\r\n                    console.error(`Error getting PDF page: ${error}`);\r\n                });\r\n                }).catch((error) => {\r\n                console.error(`Error loading PDF document: ${error}`);\r\n                });\r\n            } else {\r\n                // handle unsupported file types\r\n                console.log(`Unsupported file type: ${file.type}`);\r\n            }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        });\r\n    }, []);\r\n\r\n    const onDelete = useCallback((id) => {\r\n        if(id !== \"null\"){\r\n            setImages((prevState) => prevState.filter((image) => image.id !== id));\r\n            setClasses((prevState) => prevState.filter((classInfo) => classInfo.id !== id));\r\n        }\r\n    }, []);\r\n    \r\n    function changeClass2(e){\r\n        <Route path = \"/details\" element = {<FileDetails />}/>\r\n        //navigate('/details');\r\n        // <FileDetails courses = {classes} index = {e.target.id} />\r\n        navigate('/details', {state: { courses : classes, index: e.target.id}});\r\n        \r\n    }\r\n\r\n    return (\r\n        <main className=\"App\">\r\n            <Header/>\r\n                <div className = \"fullpage\">\r\n                    <div className = \"wrapper\">\r\n                        {/* <NavBar username = \"Abel\" items = {classes.map(c => c.course)} changeClass = {changeClass2} />\r\n                         */}\r\n                        <NavBar username = {userName} items = {classes.map(c => c.course)} changeClass = {changeClass2} />\r\n                        <div className = \"elements\">\r\n                            <Dropzone \r\n                                onDrop={onDrop} \r\n                                accept={\"application.pdf\"} \r\n                                restrictions={{\r\n                                allowedExtensions: [\".pdf\"]\r\n                                }}\r\n                            />\r\n                            <ImageGrid images={images} onDelete={onDelete}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Home","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\Register.js",["108","109"],[],"import './Register.css'\r\nimport {useState} from 'react'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport logo from './../syllabyelogo.png';\r\nimport { gapi } from 'gapi-script';\r\nimport { GoogleOAuthProvider } from '@react-oauth/google';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\n\r\n\r\nfunction Register() {\r\n    var CLIENT_ID\r\n    var API_KEY\r\n    var DISCOVERY_DOCS\r\n    var SCOPES\r\n\r\n    const res = fetch(\"http://localhost:1337/api/google-auth-keys\", {\r\n        method: \"GET\",\r\n    }).then((res) => res.json()\r\n    ).then((res) => {\r\n        CLIENT_ID = res.CLIENT_ID\r\n        API_KEY = res.API_KEY\r\n        DISCOVERY_DOCS = res.DISCOVERY_DOCS\r\n        SCOPES = res.SCOPES\r\n    });\r\n    \r\n    const navigate = useNavigate()\r\n\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [vPassword, setVPassword] = useState('');\r\n\r\n    function handleLoginAsk(e){\r\n        e.preventDefault();\r\n        navigate('/login');\r\n    }\r\n\r\n    async function registeredUser(event) {\r\n        event.preventDefault()\r\n\r\n        const response = await fetch('http://localhost:1337/api/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password\r\n            }),\r\n        })\r\n\r\n        const data = await response.json();\r\n\r\n        if(data.status === 'ok'){\r\n            navigate('/login')\r\n        }\r\n    }\r\n\r\n    async function googleAuth() {\r\n        gapi.load('client:auth2', () => {\r\n            gapi.client.init({\r\n                apiKey: API_KEY,\r\n                clientId: CLIENT_ID,\r\n                discoveryDocs: [DISCOVERY_DOCS],\r\n                scope: SCOPES,\r\n            }).then(() => {\r\n                gapi.auth2.getAuthInstance().signIn().then(async () => {\r\n                    const google = await gapi.auth2.getAuthInstance().currentUser\r\n                    const googleToken = await google.get().getAuthResponse().id_token;\r\n                    const googleUser = await google.get().getBasicProfile();\r\n                    const userName = googleUser.getName();\r\n                    const userEmail = googleUser.getEmail();\r\n\r\n                    console.log(googleToken);\r\n                    console.log(userName);\r\n                    console.log(userEmail);\r\n\r\n                    const response = await fetch('http://localhost:1337/api/google-auth-register', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name: userName,\r\n                            email: userEmail,\r\n                            password: googleToken,\r\n                        }),\r\n                    })\r\n\r\n                    const data = await response.json();\r\n                    console.log(data);\r\n\r\n                    for (let i = 0; i < localStorage.length; i++) {\r\n                        const key = localStorage.key(i);\r\n                        if (key.startsWith('token')) {\r\n                          console.log(localStorage.getItem(key));\r\n                        }\r\n                    }\r\n\r\n                    if(data.status === 'ok'){\r\n                        console.log(\"Works\")\r\n                        localStorage.setItem('token', data.user)\r\n                        navigate('/home')\r\n                    }\r\n                    else if(data.status === 'error'){\r\n                        alert(\"You already have an account with this email. Please login instead.\")\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n            // const google = await gapi.auth2.getAuthInstance().currentUser\r\n            // const googleToken = await google.get().getAuthResponse().id_token;\r\n            // const googleUser = await google.get().getBasicProfile();\r\n            // const userName = googleUser.getName();\r\n            // const userEmail = googleUser.getEmail();\r\n\r\n\r\n\r\n\r\n\r\n            // console.log(await gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile());\r\n            // const googleUser = await gapi.auth2.getAuthInstance().currentUser.get();\r\n            // // console.log(googleUser);\r\n\r\n            \r\n            // // console.log(googleToken);\r\n            // const userName = await googleUser.getBasicProfile().getName();\r\n            // console.log(userName);\r\n            // const googleToken = googleUser.getAuthResponse().id_token;\r\n            // const userEmail = googleUser.getBasicProfile().getEmail();\r\n            // console.log(googleUser);\r\n            // console.log(googleToken);\r\n            // console.log(userName);\r\n            // console.log(userEmail);\r\n\r\n\r\n            // const googleToken = await gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().id_token;\r\n            // const googleUser = await gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\r\n            // const userName = await gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile().getName();\r\n            // const userEmail = await gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile().getEmail();\r\n\r\n            // const response = await fetch('http://localhost:1337/api/google-auth-register', {\r\n            //     method: 'POST',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json'\r\n            //     },\r\n            //     body: JSON.stringify({\r\n            //         token: googleToken,\r\n            //         name: userName,\r\n            //         email: userEmail,\r\n            //     })\r\n            // })\r\n            \r\n    //         const response = await fetch('http://localhost:1337/api/google-auth-register', {\r\n    //             method: 'POST',\r\n    //             headers: {\r\n    //                 'Content-Type': 'application/json'\r\n    //             },\r\n    //             body: JSON.stringify({\r\n    //                 token: gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().id_token,\r\n    //                 name: gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile().getName(),\r\n    //                 email: gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile().getEmail(),\r\n    //             })\r\n    //         })\r\n\r\n    //         const data = await response.json()\r\n\r\n    //         if(data.status === 'ok'){\r\n    //             console.log(\"Works\")\r\n    //             localStorage.setItem('token', data.user)\r\n    //             navigate('/home')\r\n    //         }\r\n    //         else if(data.status === 'error'){\r\n    //             alert(\"You already have an account with this email. Please login instead.\")\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <div className = \"nameEnc\">\r\n                    <label for=\"nameField\" id=\"name\"><img src={logo}/></label>\r\n                </div>\r\n            </header>\r\n            <div className = \"Form\">\r\n                <div className = \"RealForm\">\r\n                    <label for=\"signupField\" id=\"signup\">Sign Up</label>\r\n                    <label for=\"personNameField\" class = \"labels\" id = \"personName\">Name</label>\r\n                    <form onSubmit = {registeredUser}>\r\n                        <input\r\n                            class = \"inputs\"\r\n                            value = {name}\r\n                            onChange = {(e) => setName(e.target.value)}\r\n                            type=\"text\"  \r\n                        />\r\n                        <br />\r\n                        <label for=\"emailField\" class = \"labels\" id = \"email\">Email</label>\r\n                        <input \r\n                            class = \"inputs\"\r\n                            value = {email}\r\n                            onChange = {(e) => setEmail(e.target.value)}\r\n                            type=\"text\"  \r\n                        />\r\n                        <br />\r\n                        <label for=\"passwordField\" class = \"labels\" id = \"password\">Password</label>\r\n                        {/* <br /> */}\r\n                        <input \r\n                            class = \"inputs\"\r\n                            value = {password}\r\n                            onChange = {(e) => setPassword(e.target.value)}\r\n                            type=\"password\"  \r\n                        />\r\n                        <br />\r\n                        <label for=\"verifypwField\" class = \"labels\" id = \"verifypw\">Verify password</label>\r\n                        {/* <br /> */}\r\n                        \r\n                        <input \r\n                            class = \"inputs\"\r\n                            value = {vPassword}\r\n                            onChange = {(e) => setVPassword(e.target.value)}\r\n                            type=\"password\"  \r\n                        />\r\n                        <br />\r\n                        <input id=\"signupButton\" className=\"Buttons\" type=\"submit\" value=\"Sign Up\"/>\r\n                        <p className=\"or\"> or </p>\r\n                    </form>\r\n                    <button className=\"googleBtn\">\r\n                    <GoogleOAuthProvider clientId=\"436198478288-efo40fbhrj324kk9uktqfr20tthrt5dk.apps.googleusercontent.com\">\r\n                        <GoogleLogin\r\n                            onSuccess={googleAuth}\r\n                            onError={() => {\r\n                                console.log('Login Failed');\r\n                            }}\r\n                        />\r\n                    </GoogleOAuthProvider>\r\n                    </button>\r\n                    <p id = \"yesAccount\">Already have an account?</p>\r\n                    <input className='Buttons' id=\"signinButton3\" type=\"submit\" value=\"Click here to sign in.\" onClick={handleLoginAsk}/>\r\n                    <br />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\FileDetails.js",["110","111","112"],[],"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Header.js",["113","114","115","116","117"],[],"import \"./Header.css\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useNavigate} from 'react-router-dom'\r\nimport longLogo from './../../syllabyelogo.png';\r\nimport miniLogo from './../../miniLogo.png';\r\n\r\n\r\nconst Header = () => {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    async function logout() {\r\n        localStorage.removeItem('token')\r\n        navigate('/login')\r\n    }\r\n\r\n    async function home() {\r\n        navigate('/home')\r\n    }\r\n\r\n    async function calendar() {\r\n        window.location.replace(\"http://localhost:3000/calendar\")\r\n    }\r\n\r\n    return (\r\n\r\n        <header>\r\n            <a href='http://localhost:3000/home'> <img className=\"miniLogo\" src={miniLogo}/> </a>\r\n            <a > <img className=\"longLogo\" src={longLogo}/> </a>\r\n            <nav>\r\n            <button onClick={calendar} class=\"headerBtn\"> Calendar </button>\r\n            <button onClick={logout} class=\"headerBtn\">Logout</button>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n  \r\n  export default Header","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\TeacherInfo.js",["118","119"],[],"import React from 'react';\r\nimport Popup from 'reactjs-popup'\r\nimport PopupField from './PopupField';\r\nimport './TeacherInfo.css'\r\nfunction TeacherInfo(props){\r\n    return(\r\n        <div className = \"box\">\r\n            <div className = \"inlineForGood\">\r\n            <label id=\"namelabel\">Teacher/Class Info</label>\r\n            {/* <button className=\"addItem\" onChange = {props.addField}>+</button> */}\r\n            </div>\r\n            \r\n            <table className=\"infoList\">\r\n                {props.items.map(item => (\r\n                    <tr>\r\n                        <td id=\"fieldForTeacher\">{item.field}</td>\r\n                        <td>{item.info}</td>\r\n                    </tr>\r\n                    // <li>{item.field + \": \" + item.info}</li>\r\n                ))}\r\n            </table>\r\n        </div>\r\n        );\r\n}\r\n// class TeacherInfo extends React.Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state = props;\r\n//     }\r\n//     render(){\r\n//         return(\r\n//             <div className = \"box\">\r\n//                 <label id=\"namelabel\">Teacher/Class Info</label>\r\n//                 <Popup trigger = {<button className=\"addItem\" onChange = {this.props.addField}>+</button>}>\r\n//                 <div>This is the popup</div>\r\n//                 </Popup>\r\n//                 <table className=\"infoList\">\r\n//                     {this.props.items.map(item => (\r\n//                         <tr>\r\n//                             <td id=\"fieldForTeacher\">{item.field}</td>\r\n//                             <td>{item.info}</td>\r\n//                         </tr>\r\n//                         // <li>{item.field + \": \" + item.info}</li>\r\n//                     ))}\r\n//                 </table>\r\n//             </div>\r\n//             );\r\n//     }\r\n// }\r\n// function TeacherInfo(props){\r\n//     return(\r\n//     <div className = \"box\">\r\n//         <label id=\"namelabel\">Teacher/Class Info</label>\r\n//         <table className=\"infoList\">\r\n//             {props.items.map(item => (\r\n//                 <tr>\r\n//                     <td id=\"fieldForTeacher\">{item.field}</td>\r\n//                     <td>{item.info}</td>\r\n//                 </tr>\r\n//                 // <li>{item.field + \": \" + item.info}</li>\r\n//             ))}\r\n//         </table>\r\n//     </div>\r\n//     );\r\n// }\r\nexport default TeacherInfo;","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\GradeDistribution.js",[],[],"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Dates.js",[],[],"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\ImageGrid.js",["120"],[],"import React from \"react\";\r\nimport trash from \"./delete-icon.png\";\r\n\r\nconst Image = ({ image, onDelete }) => {\r\n\r\n  async function deleteImage() {\r\n    const res = await fetch(\"http://localhost:1337/api/delete\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({ thumbnail: image.src }),\r\n    })\r\n    if(res){\r\n      onDelete(image.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n    \r\n    <div className=\"file-item\">\r\n      <button className=\"delete\" onClick={deleteImage}></button>\r\n      {image.isPdf ? (\r\n        <div className=\"pdf-icon\">PDF</div>\r\n      ) : (\r\n        <img\r\n          alt={`img - ${image.id}`}\r\n          src={image.src}\r\n          className=\"file-img\"\r\n        />\r\n      )}\r\n\r\n      \r\n      <button type=\"button\" className=\"pdf-label\">{image.name}</button>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nfunction ImageGrid({ images, onDelete }) {\r\n  \r\n  const renderImage = (image) => {\r\n    return <Image image={image} key={`${image.id}-image`} onDelete={onDelete}/> ;\r\n  };\r\n\r\n  return (\r\n    <section className=\"file-list\">{images.map(renderImage)}</section>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Dropzone.js",["121","122","123","124","125"],[],"import React from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./Dropzone.css\";\r\nimport { Document, Page } from 'react-pdf';\r\n\r\nfunction Dropzone({ onDrop, accept, open }) {\r\n\r\n  const { getRootProps, getInputProps, isDragActive, acceptedFiles, fileRejections } =\r\n    useDropzone({\r\n      accept: \"./pdf\", onDrop,\r\n    });\r\n\r\n  const files = acceptedFiles.map((file) => (\r\n     <li key={file.path}>\r\n       {file.path} - {file.size} bytes\r\n     </li>\r\n   ));\r\n\r\n  acceptedFiles.forEach((file) => {\r\n    \r\n  });\r\n\r\n  // const inpFile = document.getElementById('inpFile');\r\n  // // const btnUpload = document.getElementById('btnUpload');\r\n\r\n  // async function clickUpload() {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"pdfFile\", inpFile.files[0]);\r\n  //   // console.log(\"test\");\r\n  //   const res = await fetch(\"http://localhost:1337/extract-text\", {\r\n  //       method: \"post\",\r\n  //       body: formData\r\n  //   });\r\n\r\n  //   const extractedText = await res.json();\r\n  //   if (extractedText) {\r\n  //      console.log(extractedText);\r\n  //      return extractedText;\r\n  //   }\r\n  //   else{\r\n  //     return \"Error\";\r\n  //   }\r\n  // }\r\n\r\n  // btnUpload.addEventListener(\"click\", () => {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"pdfFile\", inpFile.files[0]);\r\n  //   fetch(\"/extract-text\", {\r\n  //       method: \"post\",\r\n  //       body: formData\r\n  //   }).then(response => {\r\n  //       return response.text();\r\n  //   }).then(extractedText => {\r\n  //       resultText.value = extractedText;\r\n  //   })\r\n  // });\r\n\r\n  const acceptedFileItems = acceptedFiles.map(file => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  const fileRejectionItems = fileRejections.map(({ file, errors }) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n      <ul>\r\n        {errors.map(e => (\r\n          <li key={e.code}>{e.message}</li>\r\n        ))}\r\n      </ul>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <div {...getRootProps({ className: \"dropzone\" })}>\r\n        <input className=\"input-zone\" {...getInputProps()} />\r\n        <div className=\"text-center\">\r\n          {isDragActive ? (\r\n            <p className=\"dropzone-content\">\r\n              Release to drop the files here\r\n            </p>\r\n          ) : (\r\n            <p className=\"dropzone-content\">\r\n              Drag’ n’ drop some files here, or click to select files.\r\n              <br></br>\r\n              Only accepts PDF files. \r\n            </p>\r\n            )}\r\n          \r\n          { <div id=\"smolBtn\" onClick={open}>\r\n            \r\n          </div> }\r\n          {/* <input type=\"file\" id=\"inpFile\"/>\r\n          <button type=\"button\" id=\"btnUpload\">Upload</button> */}\r\n        </div>\r\n        {/* { <aside>\r\n        <h4>Accepted files</h4>\r\n        <ul>{acceptedFileItems}</ul>\r\n        <h4>Rejected files</h4>\r\n        <ul>{fileRejectionItems}</ul>\r\n      </aside> } */}\r\n      </div>\r\n    </div>\r\n  );\r\n  // return (\r\n  //   <div>\r\n  //     <input type=\"file\" id=\"inpFile\"/>\r\n  //     <input\r\n  //       type=\"button\"\r\n  //       id=\"btnUpload\"\r\n  //       value=\"Upload\"\r\n  //       onClick={() => { clickUpload() }}\r\n  //     />\r\n  //   </div>\r\n  // );\r\n\r\n}\r\n\r\nexport default Dropzone;","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\CalendarPg.js",["126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],[],"import { React, useEffect, useState } from 'react';\r\nimport Header from \"./components/Header\";\r\nimport { gapi } from 'gapi-script';\r\n\r\nfunction CalendarPg() {\r\n    var CLIENT_ID\r\n    var API_KEY\r\n    var DISCOVERY_DOCS\r\n    var SCOPES\r\n    var calendarID\r\n    const dateKeywords = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n    const res = fetch(\"http://localhost:1337/api/google-auth-keys\", {\r\n        method: \"GET\",\r\n    }).then((res) => res.json()\r\n    ).then((res) => {\r\n        CLIENT_ID = res.CLIENT_ID\r\n        API_KEY = res.API_KEY\r\n        DISCOVERY_DOCS = res.DISCOVERY_DOCS\r\n        SCOPES = res.SCOPES\r\n    });\r\n\r\n    useEffect(() => {\r\n        gapi.load('client:auth2', async () => {\r\n            console.log('loaded client')\r\n\r\n            gapi.client.init({\r\n                apiKey: API_KEY,\r\n                clientId: CLIENT_ID,\r\n                discoveryDocs: [DISCOVERY_DOCS],\r\n                scope: SCOPES,\r\n            })\r\n\r\n            gapi.client.load('calendar', 'v3', () => console.log('bam!'))\r\n\r\n            const cres = await fetch(\"http://localhost:1337/api/getCalendarID\", {\r\n                method: \"GET\",\r\n                headers: {\"x-access-token\" : localStorage.getItem(\"token\"),},\r\n            })\r\n            const cdata = await cres.json();\r\n            calendarID = cdata.calendarID\r\n\r\n            if (calendarID == null) {\r\n                gapi.auth2.getAuthInstance().isSignedIn.listen(() => {\r\n                    try{\r\n                        const userProfile = gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\r\n                        const userEmail = userProfile.getEmail();\r\n                        let calendarEmbedUrl = \"https://calendar.google.com/calendar/embed?src=\" + userEmail + \"&ctz=America%2FCentral\";\r\n                        const calendarFrame = document.createElement('iframe');\r\n                        calendarFrame.setAttribute('src', calendarEmbedUrl);\r\n                        calendarFrame.setAttribute('style', ' framework:0');\r\n                        document.getElementById('calendar-container').appendChild(calendarFrame);\r\n                    }\r\n                    catch(err){\r\n                        console.log(err)\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                gapi.auth2.getAuthInstance().isSignedIn.listen(() => {\r\n                    try{\r\n                        const userProfile = gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\r\n                        const userEmail = userProfile.getEmail();\r\n                        let calendarEmbedUrl = \"https://calendar.google.com/calendar/embed?src=\" + userEmail  + \"&src=\" + calendarID + \"&ctz=America%2FCentral\";\r\n                        const calendarFrame = document.createElement('iframe');\r\n                        calendarFrame.setAttribute('src', calendarEmbedUrl);\r\n                        calendarFrame.setAttribute('style', 'border-width:0; width:100vw; height:100vh; framework:0');\r\n                        document.getElementById('calendar-container').appendChild(calendarFrame);\r\n                    }\r\n                    catch(err){\r\n                        console.log(err)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    async function eventUpload() {\r\n        const temp = []\r\n        const year = []\r\n        const ev = []\r\n        const name = []\r\n        var syllabyeCalendarId = \"\"\r\n\r\n        var req = await gapi.client.calendar.calendarList.list();\r\n        // console.log(req);\r\n\r\n        if(calendarID == null){\r\n            const calendars = req.result.items;\r\n            for (var i = 0; i < calendars.length; i++) {\r\n                console.log(calendars[i].summary);\r\n                if (calendars[i].summary == \"Syllabye\") {\r\n                    var syllabyeCalendar = calendars[i];\r\n                    break;\r\n                }\r\n            }\r\n            console.log(syllabyeCalendar);\r\n            syllabyeCalendarId = syllabyeCalendar.id;\r\n\r\n\r\n            fetch(\"http://localhost:1337/api/postCalendarID\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"x-access-token\" : localStorage.getItem(\"token\"),\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    calendarID: syllabyeCalendarId,\r\n                })\r\n            })\r\n\r\n            calendarID = syllabyeCalendarId\r\n        }\r\n\r\n        const files = await fetch(\"http://localhost:1337/api/files\", {\r\n            method: \"GET\",\r\n            headers: {\"x-access-token\" : localStorage.getItem(\"token\"),},\r\n        })\r\n\r\n        const filesJson = await files.json()\r\n        filesJson.forEach((file) => {\r\n            name.push(file.fileData.courseNum);\r\n            temp.push(file.fileData.calendar);\r\n            let term = file.fileData.term;\r\n            year.push(term.split(\" \")[1]);\r\n        })\r\n\r\n        // console.log(temp)\r\n        for (let i = 0; i < temp.length; i++) {\r\n            for (let j = 0; j < temp[i].length; j++) {\r\n                if ((temp[i][j].assignment[0] != \"None\" || temp[i][j].important[0] != \"None\") && temp[i][j].date[0] != \"None\") {\r\n                    if(temp[i][j].important[0] != \"None\"){\r\n                        let month = \"\";\r\n                        let day = \"\";\r\n                        if(temp[i][j].important[0].includes(\" | \")){\r\n                            let important = temp[i][j].important[0].split(\" | \");\r\n                            if(important[0].includes(\"/\")){\r\n                                month = important[0].split(\"/\")[0];\r\n                                day = important[0].split(\"/\")[1];\r\n                                if (month.length == 1) {\r\n                                    month = \"0\" + month;\r\n                                }\r\n                                if (day.length == 1) {\r\n                                    day = \"0\" + day;\r\n                                }\r\n                            }\r\n                            else{\r\n                                for(let k = 0; k < dateKeywords.length; k++){\r\n                                    if(important[0].includes(dateKeywords[k])){\r\n                                        month = (k + 1).toString();\r\n                                        day = important[0].split(\" \")[1];\r\n                                        if (month.length == 1) {\r\n                                            month = \"0\" + month;\r\n                                        }\r\n                                        if (day.length == 1) {\r\n                                            day = \"0\" + day;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            ev.push({\r\n                                'summary': name[i] + \" \" + important[1],\r\n                                'start':{\r\n                                    'date': year[i]+\"-\"+month+\"-\"+day,\r\n                                    'timeZone': 'America/Chicago'\r\n                                },\r\n                                'end':{\r\n                                    'date': year[i]+\"-\"+month+\"-\"+day,\r\n                                    'timeZone': 'America/Chicago'\r\n                                },\r\n                                'reminders': {\r\n                                    'useDefault': false,\r\n                                    'overrides': [\r\n                                        {'method': 'email', 'minutes': 24 * 60},\r\n                                        {'method': 'popup', 'minutes': 10}\r\n                                    ]\r\n                                }\r\n                            })\r\n                        }\r\n                        else{\r\n                            let d = temp[i][j].date[temp[i][j].date.length - 1]\r\n                            if(d.includes(\"/\")){\r\n                                month = d.split(\"/\")[0];\r\n                                day = d.split(\"/\")[1];\r\n                                if (month.length == 1) {\r\n                                    month = \"0\" + month;\r\n                                }\r\n                                if (day.length == 1) {\r\n                                    day = \"0\" + day;\r\n                                }\r\n                            }\r\n                            else{\r\n                                for(let k = 0; k < dateKeywords.length; k++){\r\n                                    if(d.includes(dateKeywords[k])){\r\n                                        month = (k + 1).toString();\r\n                                        day = d.split(\" \")[1];\r\n                                        if (month.length == 1) {\r\n                                            month = \"0\" + month;\r\n                                        }\r\n                                        if (day.length == 1) {\r\n                                            day = \"0\" + day;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            ev.push({\r\n                                'summary': name[i] + \" \" + temp[i][j].important[0],\r\n                                'start':{\r\n                                    'date': year[i]+\"-\"+month+\"-\"+day,\r\n                                    'timeZone': 'America/Chicago'\r\n                                },\r\n                                'end':{\r\n                                    'date': year[i]+\"-\"+month+\"-\"+day,\r\n                                    'timeZone': 'America/Chicago'\r\n                                },\r\n                                'reminders': {\r\n                                    'useDefault': false,\r\n                                    'overrides': [\r\n                                        {'method': 'email', 'minutes': 24 * 60},\r\n                                        {'method': 'popup', 'minutes': 10}\r\n                                    ]\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    if(temp[i][j].assignment[0] != \"None\"){\r\n                        let month = \"\"\r\n                        let day = \"\"\r\n                        let d = temp[i][j].date[temp[i][j].date.length - 1]\r\n                        if(d.includes(\"/\")){\r\n                            month = d.split(\"/\")[0];\r\n                            day = d.split(\"/\")[1];\r\n                            if (month.length == 1) {\r\n                                month = \"0\" + month;\r\n                            }\r\n                            if (day.length == 1) {\r\n                                day = \"0\" + day;\r\n                            }\r\n                        }\r\n                        else{\r\n                            for(let k = 0; k < dateKeywords.length; k++){\r\n                                if(d.includes(dateKeywords[k])){\r\n                                    month = (k + 1).toString();\r\n                                    day = d.split(\" \")[1];\r\n                                    if (month.length == 1) {\r\n                                        month = \"0\" + month;\r\n                                    }\r\n                                    if (day.length == 1) {\r\n                                        day = \"0\" + day;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        ev.push({\r\n                            'summary': name[i] + \" \" + temp[i][j].assignment[0],\r\n                            'start':{\r\n                                'date': year[i]+\"-\"+month+\"-\"+day,\r\n                                'timeZone': 'America/Chicago'\r\n                            },\r\n                            'end':{\r\n                                'date': year[i]+\"-\"+month+\"-\"+day,\r\n                                'timeZone': 'America/Chicago'\r\n                            },\r\n                            'reminders': {\r\n                                'useDefault': false,\r\n                                'overrides': [\r\n                                    {'method': 'email', 'minutes': 24 * 60},\r\n                                    {'method': 'popup', 'minutes': 10}\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var currentYear = new Date().getFullYear();\r\n        var beginningOfYear = new Date(currentYear, 0, 1); // January 1st of current year\r\n        var time = beginningOfYear.toISOString();\r\n\r\n        var request = gapi.client.calendar.events.list({\r\n            'calendarId': calendarID,\r\n            'timeMin': time,\r\n            'showDeleted': false,\r\n            'singleEvents': true,\r\n            'maxResults': 100,\r\n            'orderBy': 'startTime'\r\n        })\r\n\r\n        request.execute( (resp) => {\r\n            var events = resp.items;\r\n            var batch = gapi.client.newBatch();\r\n\r\n            for (var i = 0; i < events.length; i++) {\r\n                var event = events[i];\r\n                var when = event.start.dateTime;\r\n                if (!when) {\r\n                    when = event.start.date;\r\n                    for (var j = 0; j < ev.length; j++) {\r\n                        if (ev[j].summary == (event.summary) && ev[j].start.date == (event.start.date)) {\r\n                            ev.splice(j, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (var i = 0; i < ev.length; i++) {\r\n                batch.add(gapi.client.calendar.events.insert({\r\n                    'calendarId': calendarID,\r\n                    'resource': ev[i]\r\n                }));\r\n            }\r\n        \r\n            batch.execute(function(resp, raw) {\r\n                console.log(resp);\r\n            });\r\n        })\r\n\r\n        try{\r\n            const userProfile = gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\r\n            const userEmail = userProfile.getEmail();\r\n            let calendarEmbedUrl = \"https://calendar.google.com/calendar/embed?src=\" + userEmail  + \"&src=\" + calendarID + \"&ctz=America%2FCentral\";\r\n            const calendarFrame = document.createElement('iframe');\r\n            calendarFrame.setAttribute('src', calendarEmbedUrl);\r\n            calendarFrame.setAttribute('style', 'border-width:0; width:100vw; height:100vh; framework:0');\r\n            const oldCalendarFrame = document.getElementById('calendar-container').getElementsByTagName('iframe')[0];\r\n            oldCalendarFrame.parentNode.removeChild(oldCalendarFrame);\r\n            document.getElementById('calendar-container').appendChild(calendarFrame);\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n\r\n    const handleClick = () => {\r\n        console.log(gapi);\r\n        const temp = []\r\n        const year = []\r\n        const ev = []\r\n        const name = []\r\n        var syllabyeCalendarId = \"\"\r\n        gapi.load('client:auth2', async () => {\r\n          console.log('loaded client')\r\n    \r\n            gapi.client.init({\r\n                apiKey: API_KEY,\r\n                clientId: CLIENT_ID,\r\n                discoveryDocs: [DISCOVERY_DOCS],\r\n                scope: SCOPES,\r\n            })\r\n    \r\n            gapi.client.load('calendar', 'v3', () => console.log('Success!'))\r\n\r\n            var req = await gapi.client.calendar.calendarList.list({});\r\n\r\n            if (calendarID == null) {\r\n                console.log(\"test\")\r\n                console.log(req);\r\n                var status = false;\r\n                for (var i = 0; i < req.result.items.length; i++) {\r\n                    if (req.result.items[i].summary == \"Syllabye\") {\r\n                        status = true;\r\n                    }\r\n                }\r\n\r\n                if (status == false) {\r\n                    var req2 = gapi.client.calendar.calendars.insert({\r\n                        'summary': 'Syllabye',\r\n                        'timeZone': 'America/Chicago',\r\n                    });\r\n                    await req2.execute(async function(resp) {\r\n                        console.log(\"Calendar Created1\");\r\n                        console.log(resp);\r\n                        eventUpload();\r\n                    });\r\n                }\r\n                else{\r\n                    eventUpload();\r\n                }\r\n            }\r\n            else{\r\n                eventUpload();\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <main>\r\n            <Header/>\r\n            <div>  \r\n                <div id=\"calendar-container\"></div>\r\n                <button className=\"eventBtn\" onClick={handleClick} class=\"Events\">Add Events</button>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default CalendarPg;","C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\NavBar.js",[],[],"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\Description.js",[],[],"C:\\Users\\marie\\source\\repos\\Syllabye\\SyllaBye\\Frontend\\src\\pages\\components\\PopupField.js",["157"],[],"import React from \"react\";\r\nimport Popup from 'reactjs-popup';\r\nexport default (props) => {\r\n    <Popup trigger = {<button>Trigger</button>}>\r\n            <div>This is the popup</div>\r\n    </Popup>\r\n}",{"ruleId":"158","severity":1,"message":"159","line":23,"column":52,"nodeType":"160","endLine":23,"endColumn":69},{"ruleId":"161","severity":1,"message":"162","line":15,"column":11,"nodeType":"163","messageId":"164","endLine":15,"endColumn":14},{"ruleId":"158","severity":1,"message":"159","line":115,"column":56,"nodeType":"160","endLine":115,"endColumn":73},{"ruleId":"161","severity":1,"message":"165","line":8,"column":17,"nodeType":"163","messageId":"164","endLine":8,"endColumn":25},{"ruleId":"161","severity":1,"message":"166","line":8,"column":27,"nodeType":"163","messageId":"164","endLine":8,"endColumn":31},{"ruleId":"161","severity":1,"message":"167","line":12,"column":39,"nodeType":"163","messageId":"164","endLine":12,"endColumn":45},{"ruleId":"161","severity":1,"message":"168","line":12,"column":47,"nodeType":"163","messageId":"164","endLine":12,"endColumn":53},{"ruleId":"161","severity":1,"message":"169","line":65,"column":23,"nodeType":"163","messageId":"164","endLine":65,"endColumn":28},{"ruleId":"170","severity":1,"message":"171","line":99,"column":8,"nodeType":"172","endLine":99,"endColumn":10,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":102,"column":34,"nodeType":"176","messageId":"177","endLine":102,"endColumn":36},{"ruleId":"161","severity":1,"message":"162","line":16,"column":11,"nodeType":"163","messageId":"164","endLine":16,"endColumn":14},{"ruleId":"158","severity":1,"message":"159","line":187,"column":54,"nodeType":"160","endLine":187,"endColumn":71},{"ruleId":"161","severity":1,"message":"178","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":13},{"ruleId":"161","severity":1,"message":"179","line":8,"column":9,"nodeType":"163","messageId":"164","endLine":8,"endColumn":18},{"ruleId":"161","severity":1,"message":"180","line":8,"column":30,"nodeType":"163","messageId":"164","endLine":8,"endColumn":41},{"ruleId":"161","severity":1,"message":"179","line":2,"column":16,"nodeType":"163","messageId":"164","endLine":2,"endColumn":25},{"ruleId":"161","severity":1,"message":"181","line":17,"column":20,"nodeType":"163","messageId":"164","endLine":17,"endColumn":24},{"ruleId":"158","severity":1,"message":"159","line":28,"column":51,"nodeType":"160","endLine":28,"endColumn":93},{"ruleId":"182","severity":1,"message":"183","line":29,"column":13,"nodeType":"160","endLine":29,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":29,"column":18,"nodeType":"160","endLine":29,"endColumn":60},{"ruleId":"161","severity":1,"message":"178","line":2,"column":8,"nodeType":"163","messageId":"164","endLine":2,"endColumn":13},{"ruleId":"161","severity":1,"message":"184","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":18},{"ruleId":"161","severity":1,"message":"185","line":2,"column":8,"nodeType":"163","messageId":"164","endLine":2,"endColumn":13},{"ruleId":"161","severity":1,"message":"165","line":4,"column":10,"nodeType":"163","messageId":"164","endLine":4,"endColumn":18},{"ruleId":"161","severity":1,"message":"166","line":4,"column":20,"nodeType":"163","messageId":"164","endLine":4,"endColumn":24},{"ruleId":"161","severity":1,"message":"169","line":13,"column":9,"nodeType":"163","messageId":"164","endLine":13,"endColumn":14},{"ruleId":"161","severity":1,"message":"186","line":58,"column":9,"nodeType":"163","messageId":"164","endLine":58,"endColumn":26},{"ruleId":"161","severity":1,"message":"187","line":64,"column":9,"nodeType":"163","messageId":"164","endLine":64,"endColumn":27},{"ruleId":"161","severity":1,"message":"188","line":1,"column":28,"nodeType":"163","messageId":"164","endLine":1,"endColumn":36},{"ruleId":"161","severity":1,"message":"162","line":13,"column":11,"nodeType":"163","messageId":"164","endLine":13,"endColumn":14},{"ruleId":"170","severity":1,"message":"189","line":41,"column":26,"nodeType":"190","endLine":41,"endColumn":42},{"ruleId":"191","severity":1,"message":"192","line":92,"column":42,"nodeType":"193","messageId":"194","endLine":92,"endColumn":44},{"ruleId":"191","severity":1,"message":"195","line":131,"column":47,"nodeType":"193","messageId":"194","endLine":131,"endColumn":49},{"ruleId":"191","severity":1,"message":"195","line":131,"column":84,"nodeType":"193","messageId":"194","endLine":131,"endColumn":86},{"ruleId":"191","severity":1,"message":"195","line":131,"column":117,"nodeType":"193","messageId":"194","endLine":131,"endColumn":119},{"ruleId":"191","severity":1,"message":"195","line":132,"column":48,"nodeType":"193","messageId":"194","endLine":132,"endColumn":50},{"ruleId":"191","severity":1,"message":"192","line":140,"column":50,"nodeType":"193","messageId":"194","endLine":140,"endColumn":52},{"ruleId":"191","severity":1,"message":"192","line":143,"column":48,"nodeType":"193","messageId":"194","endLine":143,"endColumn":50},{"ruleId":"191","severity":1,"message":"192","line":152,"column":58,"nodeType":"193","messageId":"194","endLine":152,"endColumn":60},{"ruleId":"191","severity":1,"message":"192","line":155,"column":56,"nodeType":"193","messageId":"194","endLine":155,"endColumn":58},{"ruleId":"191","severity":1,"message":"192","line":185,"column":50,"nodeType":"193","messageId":"194","endLine":185,"endColumn":52},{"ruleId":"191","severity":1,"message":"192","line":188,"column":48,"nodeType":"193","messageId":"194","endLine":188,"endColumn":50},{"ruleId":"191","severity":1,"message":"192","line":197,"column":58,"nodeType":"193","messageId":"194","endLine":197,"endColumn":60},{"ruleId":"191","severity":1,"message":"192","line":200,"column":56,"nodeType":"193","messageId":"194","endLine":200,"endColumn":58},{"ruleId":"191","severity":1,"message":"195","line":226,"column":49,"nodeType":"193","messageId":"194","endLine":226,"endColumn":51},{"ruleId":"191","severity":1,"message":"192","line":233,"column":46,"nodeType":"193","messageId":"194","endLine":233,"endColumn":48},{"ruleId":"191","severity":1,"message":"192","line":236,"column":44,"nodeType":"193","messageId":"194","endLine":236,"endColumn":46},{"ruleId":"191","severity":1,"message":"192","line":245,"column":54,"nodeType":"193","messageId":"194","endLine":245,"endColumn":56},{"ruleId":"191","severity":1,"message":"192","line":248,"column":52,"nodeType":"193","messageId":"194","endLine":248,"endColumn":54},{"ruleId":"191","severity":1,"message":"192","line":300,"column":43,"nodeType":"193","messageId":"194","endLine":300,"endColumn":45},{"ruleId":"191","severity":1,"message":"192","line":300,"column":82,"nodeType":"193","messageId":"194","endLine":300,"endColumn":84},{"ruleId":"196","severity":1,"message":"197","line":308,"column":22,"nodeType":"163","messageId":"198","endLine":308,"endColumn":23},{"ruleId":"161","severity":1,"message":"199","line":339,"column":15,"nodeType":"163","messageId":"164","endLine":339,"endColumn":19},{"ruleId":"161","severity":1,"message":"200","line":340,"column":15,"nodeType":"163","messageId":"164","endLine":340,"endColumn":19},{"ruleId":"161","severity":1,"message":"201","line":341,"column":15,"nodeType":"163","messageId":"164","endLine":341,"endColumn":17},{"ruleId":"161","severity":1,"message":"202","line":342,"column":15,"nodeType":"163","messageId":"164","endLine":342,"endColumn":19},{"ruleId":"161","severity":1,"message":"203","line":343,"column":13,"nodeType":"163","messageId":"164","endLine":343,"endColumn":31},{"ruleId":"191","severity":1,"message":"192","line":363,"column":53,"nodeType":"193","messageId":"194","endLine":363,"endColumn":55},{"ruleId":"191","severity":1,"message":"192","line":368,"column":28,"nodeType":"193","messageId":"194","endLine":368,"endColumn":30},{"ruleId":"204","severity":1,"message":"205","line":3,"column":1,"nodeType":"206","endLine":7,"endColumn":2},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","'Document' is defined but never used.","'Page' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'files' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["207"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Popup' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'home' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'PopupField' is defined but never used.","'trash' is defined but never used.","'acceptedFileItems' is assigned a value but never used.","'fileRejectionItems' is assigned a value but never used.","'useState' is defined but never used.","Assignments to the 'calendarID' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'i' is already defined.","redeclared","'temp' is assigned a value but never used.","'year' is assigned a value but never used.","'ev' is assigned a value but never used.","'name' is assigned a value but never used.","'syllabyeCalendarId' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"208","fix":"209"},"Update the dependencies array to be: [navigate]",{"range":"210","text":"211"},[4094,4096],"[navigate]"]